{"version":3,"file":"questionGenerator-Dh6jk9Iu.js","sources":["../../src/lib/quiz/generators/helpers.ts","../../src/lib/quiz/generators/mathGenerator.ts","../../src/lib/quiz/generators/verbalGenerator.ts","../../src/lib/quiz/generators/logicalGenerator.ts","../../src/lib/quiz/generators/spatialGenerator.ts","../../src/lib/quiz/questionGenerator.ts"],"sourcesContent":["/**\r\n * Common helper functions for quiz question generators\r\n */\r\n\r\nexport interface OptionResult {\r\n  options: string[];\r\n  correctIndex: number;\r\n}\r\n\r\nexport interface OptionResult4 {\r\n  options: [string, string, string, string];\r\n  correctIndex: number;\r\n}\r\n\r\nexport interface OptionResult5 {\r\n  options: [string, string, string, string, string];\r\n  correctIndex: number;\r\n}\r\n\r\n/**\r\n * Shuffles an array using Fisher-Yates algorithm\r\n */\r\nexport function shuffleArray<T>(array: T[]): T[] {\r\n  const shuffled = [...array];\r\n  for (let i = shuffled.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\r\n  }\r\n  return shuffled;\r\n}\r\n\r\n/**\r\n * Generates multiple choice options for numeric answers\r\n * @param correctAnswer The correct numeric answer\r\n * @param optionCount Number of options to generate (default: 4)\r\n * @returns Object with shuffled options and correct index\r\n */\r\nexport function generateNumericOptions(\r\n  correctAnswer: number,\r\n  optionCount: number = 4\r\n): OptionResult4 {\r\n  const options = [correctAnswer.toString()];\r\n  let attempts = 0;\r\n  const maxAttempts = 100;\r\n\r\n  // Generate incorrect options with reasonable variations\r\n  while (options.length < optionCount && attempts < maxAttempts) {\r\n    attempts++;\r\n    let variation: number;\r\n\r\n    if (correctAnswer < 10) {\r\n      variation = Math.floor(Math.random() * 6) - 3; // -3 to +3\r\n    } else if (correctAnswer < 100) {\r\n      variation = Math.floor(Math.random() * 20) - 10; // -10 to +10\r\n    } else {\r\n      variation = Math.floor(Math.random() * 40) - 20; // -20 to +20\r\n    }\r\n\r\n    const option = correctAnswer + variation;\r\n\r\n    if (\r\n      option !== correctAnswer &&\r\n      option > 0 &&\r\n      !options.includes(option.toString())\r\n    ) {\r\n      options.push(option.toString());\r\n    }\r\n  }\r\n\r\n  // If we couldn't generate enough options, fill with simple variations\r\n  while (options.length < optionCount) {\r\n    const simpleOption = correctAnswer + options.length;\r\n    if (!options.includes(simpleOption.toString())) {\r\n      options.push(simpleOption.toString());\r\n    } else {\r\n      options.push((correctAnswer - options.length).toString());\r\n    }\r\n  }\r\n\r\n  const shuffledOptions = shuffleArray(options) as [\r\n    string,\r\n    string,\r\n    string,\r\n    string\r\n  ];\r\n  const correctIndex = shuffledOptions.findIndex(\r\n    (option) => option === correctAnswer.toString()\r\n  );\r\n\r\n  return { options: shuffledOptions, correctIndex };\r\n}\r\n\r\n/**\r\n * Generates multiple choice options for monetary amounts (cents to dollars)\r\n * @param correctAnswerCents The correct answer in cents\r\n * @param optionCount Number of options to generate (default: 4)\r\n * @returns Object with shuffled options and correct index\r\n */\r\nexport function generateMonetaryOptions(\r\n  correctAnswerCents: number,\r\n  optionCount: number = 4\r\n): OptionResult4 {\r\n  const formatCentsToDollars = (cents: number): string => {\r\n    const dollars = cents / 100;\r\n    return `$${dollars.toFixed(2)}`;\r\n  };\r\n\r\n  const options = [formatCentsToDollars(correctAnswerCents)];\r\n  let attempts = 0;\r\n  const maxAttempts = 100;\r\n\r\n  // Generate incorrect options with reasonable variations\r\n  while (options.length < optionCount && attempts < maxAttempts) {\r\n    attempts++;\r\n    let variation: number;\r\n\r\n    if (correctAnswerCents < 100) {\r\n      variation = Math.floor(Math.random() * 20) - 10; // -10 to +10\r\n    } else if (correctAnswerCents < 500) {\r\n      variation = Math.floor(Math.random() * 50) - 25; // -25 to +25\r\n    } else {\r\n      variation = Math.floor(Math.random() * 100) - 50; // -50 to +50\r\n    }\r\n\r\n    const option = correctAnswerCents + variation;\r\n\r\n    if (\r\n      option !== correctAnswerCents &&\r\n      option > 0 &&\r\n      !options.includes(formatCentsToDollars(option))\r\n    ) {\r\n      options.push(formatCentsToDollars(option));\r\n    }\r\n  }\r\n\r\n  // If we couldn't generate enough options, fill with simple variations\r\n  while (options.length < optionCount) {\r\n    const simpleOption = correctAnswerCents + options.length * 10;\r\n    if (!options.includes(formatCentsToDollars(simpleOption))) {\r\n      options.push(formatCentsToDollars(simpleOption));\r\n    } else {\r\n      options.push(\r\n        formatCentsToDollars(correctAnswerCents - options.length * 10)\r\n      );\r\n    }\r\n  }\r\n\r\n  const shuffledOptions = shuffleArray(options) as [\r\n    string,\r\n    string,\r\n    string,\r\n    string\r\n  ];\r\n  const correctIndex = shuffledOptions.findIndex(\r\n    (option) => option === formatCentsToDollars(correctAnswerCents)\r\n  );\r\n\r\n  return { options: shuffledOptions, correctIndex };\r\n}\r\n\r\n/**\r\n * Generates multiple choice options for dollar amounts with 2 decimal places\r\n * @param correctAnswerDollars The correct answer in dollars\r\n * @param optionCount Number of options to generate (default: 4)\r\n * @returns Object with shuffled options and correct index\r\n */\r\nexport function generateDollarOptions(\r\n  correctAnswerDollars: number,\r\n  optionCount: number = 4\r\n): OptionResult4 {\r\n  const formatDollars = (dollars: number): string => {\r\n    return `$${dollars.toFixed(2)}`;\r\n  };\r\n\r\n  const options = [formatDollars(correctAnswerDollars)];\r\n  let attempts = 0;\r\n  const maxAttempts = 100;\r\n\r\n  // Generate incorrect options with reasonable variations\r\n  while (options.length < optionCount && attempts < maxAttempts) {\r\n    attempts++;\r\n    let variation: number;\r\n\r\n    if (correctAnswerDollars < 10) {\r\n      variation = Math.floor(Math.random() * 4) - 2; // -2 to +2\r\n    } else if (correctAnswerDollars < 50) {\r\n      variation = Math.floor(Math.random() * 10) - 5; // -5 to +5\r\n    } else {\r\n      variation = Math.floor(Math.random() * 20) - 10; // -10 to +10\r\n    }\r\n\r\n    const option = correctAnswerDollars + variation;\r\n\r\n    if (\r\n      option !== correctAnswerDollars &&\r\n      option > 0 &&\r\n      !options.includes(formatDollars(option))\r\n    ) {\r\n      options.push(formatDollars(option));\r\n    }\r\n  }\r\n\r\n  // If we couldn't generate enough options, fill with simple variations\r\n  while (options.length < optionCount) {\r\n    const simpleOption = correctAnswerDollars + options.length * 2;\r\n    if (!options.includes(formatDollars(simpleOption))) {\r\n      options.push(formatDollars(simpleOption));\r\n    } else {\r\n      options.push(formatDollars(correctAnswerDollars - options.length * 2));\r\n    }\r\n  }\r\n\r\n  const shuffledOptions = shuffleArray(options) as [\r\n    string,\r\n    string,\r\n    string,\r\n    string\r\n  ];\r\n  const correctIndex = shuffledOptions.findIndex(\r\n    (option) => option === formatDollars(correctAnswerDollars)\r\n  );\r\n\r\n  return { options: shuffledOptions, correctIndex };\r\n}\r\n\r\n/**\r\n * Generates decimal comparison options (smallest/largest value)\r\n * @param isSmallest Whether to find smallest (true) or largest (false) value\r\n * @param optionCount Number of options to generate (default: 5)\r\n * @param maxValue Maximum value for decimals (default: 3)\r\n * @param decimalPlaces Number of decimal places (default: 3)\r\n * @returns Object with shuffled options and correct index\r\n */\r\nexport function generateDecimalComparisonOptions(\r\n  isSmallest: boolean,\r\n  optionCount: number = 5,\r\n  maxValue: number = 3,\r\n  decimalPlaces: number = 3\r\n): OptionResult5 {\r\n  // Generate decimal numbers with specified precision\r\n  const generateDecimal = (): string => {\r\n    const wholePart = Math.floor(Math.random() * (maxValue + 1)); // 0 to maxValue\r\n    const decimalPart = Math.floor(Math.random() * Math.pow(10, decimalPlaces));\r\n    return `${wholePart}.${decimalPart\r\n      .toString()\r\n      .padStart(decimalPlaces, \"0\")}`;\r\n  };\r\n\r\n  const decimals: string[] = [];\r\n  let attempts = 0;\r\n  const maxAttempts = 100;\r\n\r\n  // Generate unique decimal numbers\r\n  while (decimals.length < optionCount && attempts < maxAttempts) {\r\n    attempts++;\r\n    const decimal = generateDecimal();\r\n    if (!decimals.includes(decimal)) {\r\n      decimals.push(decimal);\r\n    }\r\n  }\r\n\r\n  // If we couldn't generate enough unique decimals, fill with simple variations\r\n  while (decimals.length < optionCount) {\r\n    const simpleDecimal = `${decimals.length * 0.5}.${\"0\".repeat(\r\n      decimalPlaces\r\n    )}`;\r\n    if (!decimals.includes(simpleDecimal)) {\r\n      decimals.push(simpleDecimal);\r\n    } else {\r\n      decimals.push(`${decimals.length * 0.25}.${\"0\".repeat(decimalPlaces)}`);\r\n    }\r\n  }\r\n\r\n  // Convert to numbers for sorting, then back to formatted strings\r\n  const decimalNumbers = decimals.map((d) => parseFloat(d));\r\n  const sortedDecimals = [...decimalNumbers].sort((a, b) => a - b);\r\n  const targetValue = isSmallest\r\n    ? sortedDecimals[0]\r\n    : sortedDecimals[optionCount - 1];\r\n\r\n  // Format all decimals, removing trailing zeros\r\n  const formattedOptions = decimals.map((decimal) => {\r\n    const num = parseFloat(decimal);\r\n    return (\r\n      num.toFixed(decimalPlaces).replace(/\\.?0+$/, \"\") ||\r\n      num.toFixed(decimalPlaces)\r\n    );\r\n  });\r\n\r\n  const shuffledOptions = shuffleArray(formattedOptions) as [\r\n    string,\r\n    string,\r\n    string,\r\n    string,\r\n    string\r\n  ];\r\n  const correctIndex = shuffledOptions.findIndex(\r\n    (option) => parseFloat(option) === targetValue\r\n  );\r\n\r\n  return { options: shuffledOptions, correctIndex };\r\n}\r\n\r\n/**\r\n * Generates a random integer within a range\r\n * @param min Minimum value (inclusive)\r\n * @param max Maximum value (inclusive)\r\n * @returns Random integer\r\n */\r\nexport function randomInt(min: number, max: number): number {\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\n/**\r\n * Generates a random number within a range\r\n * @param min Minimum value (inclusive)\r\n * @param max Maximum value (exclusive)\r\n * @returns Random number\r\n */\r\nexport function randomFloat(min: number, max: number): number {\r\n  return Math.random() * (max - min) + min;\r\n}\r\n\r\n/**\r\n * Rounds a number to specified decimal places\r\n * @param num Number to round\r\n * @param places Number of decimal places\r\n * @returns Rounded number\r\n */\r\nexport function roundToPlaces(num: number, places: number): number {\r\n  const factor = Math.pow(10, places);\r\n  return Math.round(num * factor) / factor;\r\n}\r\n","import { QuizQuestion, QuizCategory } from \"@/types/quiz\";\r\nimport {\r\n  shuffleArray,\r\n  generateNumericOptions,\r\n  generateMonetaryOptions,\r\n  generateDollarOptions,\r\n  generateDecimalComparisonOptions,\r\n} from \"./helpers\";\r\n\r\nexport class MathQuestionGenerator {\r\n  static generateQuestions(count: number): QuizQuestion[] {\r\n    const questions: QuizQuestion[] = [];\r\n\r\n    // Distribute questions across different types\r\n    const wordProblems = Math.floor(count * 0.7); // 70% word problems\r\n    const percentages = Math.floor(count * 0.2); // 20% percentages\r\n    const algebra = count - wordProblems - percentages; // remaining for algebra\r\n\r\n    // Generate questions for each type\r\n    questions.push(...this.generateWordProblems(wordProblems));\r\n    questions.push(...this.generatePercentageQuestions(percentages));\r\n    questions.push(...this.generateAlgebraQuestions(algebra));\r\n\r\n    // Shuffle and return\r\n    return shuffleArray(questions).slice(0, count);\r\n  }\r\n\r\n  private static generateWordProblems(count: number): QuizQuestion[] {\r\n    const questions: QuizQuestion[] = [];\r\n\r\n    const wordProblemTypes = [\r\n      () => this.createMagazineCostQuestion(),\r\n      () => this.createDiscountQuestion(),\r\n      () => this.createAverageQuestion(),\r\n      () => this.createRestaurantSalesQuestion(),\r\n      () => this.createCornProductionQuestion(),\r\n      () => this.createSpeedDistanceQuestion(),\r\n      () => this.createDecimalComparisonQuestion(),\r\n      () => this.createGeometryQuestion(), // ?????\r\n      () => this.createRatioQuestion(), //  ?????\r\n    ];\r\n\r\n    for (let i = 0; i < count; i++) {\r\n      const typeIndex = i % wordProblemTypes.length;\r\n      const { question, correctAnswer, options } =\r\n        wordProblemTypes[typeIndex]();\r\n\r\n      questions.push({\r\n        id: `math_word_${Date.now()}_${i}`,\r\n        category: QuizCategory.MATH,\r\n        question,\r\n        options,\r\n        correctAnswer,\r\n      });\r\n    }\r\n\r\n    return questions;\r\n  }\r\n\r\n  private static generatePercentageQuestions(count: number): QuizQuestion[] {\r\n    const questions: QuizQuestion[] = [];\r\n\r\n    for (let i = 0; i < count; i++) {\r\n      const percentageType = Math.random();\r\n      let question: string;\r\n      let correctAnswer: number;\r\n      let options: [string, string, string, string];\r\n\r\n      if (percentageType < 0.4) {\r\n        // \"X is Y% of what number?\" type\r\n        const percentage = (Math.floor(Math.random() * 5) + 1) * 5; // 5-25% (divisible by 5)\r\n        const result = Math.floor(Math.random() * 200) + 50; // 50-250\r\n        const originalNumber = Math.round((result / percentage) * 100);\r\n\r\n        question = `${result} is ${percentage}% of what number?`;\r\n        const { options: options1, correctIndex: correctIndex1 } =\r\n          generateNumericOptions(originalNumber);\r\n        correctAnswer = correctIndex1;\r\n        options = options1;\r\n      } else if (percentageType < 0.7) {\r\n        // \"What is X% of Y?\" type\r\n        const percentage = (Math.floor(Math.random() * 7) + 2) * 5; // 10-40% (divisible by 5)\r\n        const number = Math.floor(Math.random() * 200) + 50; // 50-250\r\n        const result = Math.round((number * percentage) / 100);\r\n\r\n        question = `What is ${percentage}% of ${number}?`;\r\n        const { options: options2, correctIndex: correctIndex2 } =\r\n          generateNumericOptions(result);\r\n        correctAnswer = correctIndex2;\r\n        options = options2;\r\n      } else {\r\n        // \"X increased/decreased by Y%\" type\r\n        const isIncrease = Math.random() < 0.5;\r\n        const percentage = (Math.floor(Math.random() * 6) + 2) * 5; // 10-35% (divisible by 5)\r\n        const originalNumber = Math.floor(Math.random() * 1000) + 100; // 100-1100\r\n        const change = Math.round((originalNumber * percentage) / 100);\r\n        const result = isIncrease\r\n          ? originalNumber + change\r\n          : originalNumber - change;\r\n\r\n        question = `A number starts at ${originalNumber}. It ${\r\n          isIncrease ? \"increases\" : \"decreases\"\r\n        } by ${percentage}%. What is the new value?`;\r\n        const { options: options3, correctIndex: correctIndex3 } =\r\n          generateNumericOptions(result);\r\n        correctAnswer = correctIndex3;\r\n        options = options3;\r\n      }\r\n\r\n      questions.push({\r\n        id: `math_percentage_${Date.now()}_${i}`,\r\n        category: QuizCategory.MATH,\r\n        question,\r\n        options,\r\n        correctAnswer,\r\n      });\r\n    }\r\n\r\n    return questions;\r\n  }\r\n\r\n  private static generateAlgebraQuestions(count: number): QuizQuestion[] {\r\n    const questions: QuizQuestion[] = [];\r\n\r\n    for (let i = 0; i < count; i++) {\r\n      const algebraType = Math.random();\r\n      let question: string;\r\n      let correctAnswer: number;\r\n      let options: [string, string, string, string];\r\n\r\n      if (algebraType < 0.5) {\r\n        // Simple linear equations: ax + b = c\r\n        const x = Math.floor(Math.random() * 20) + 1; // 1-20\r\n        const a = Math.floor(Math.random() * 5) + 2; // 2-6\r\n        const b = Math.floor(Math.random() * 20) + 1; // 1-20\r\n        const c = a * x + b;\r\n\r\n        question = `If ${a}x + ${b} = ${c}, what is x?`;\r\n        const { options: options4, correctIndex: correctIndex4 } =\r\n          generateNumericOptions(x);\r\n        correctAnswer = correctIndex4;\r\n        options = options4;\r\n      } else {\r\n        // Two-variable systems (simplified)\r\n        const x = Math.floor(Math.random() * 10) + 1; // 1-10\r\n        const y = Math.floor(Math.random() * 10) + 1; // 1-10\r\n        const a = Math.floor(Math.random() * 3) + 2; // 2-4\r\n        const b = Math.floor(Math.random() * 3) + 2; // 2-4\r\n        const c = a * x + b * y;\r\n\r\n        question = `If ${a}x + ${b}y = ${c}, and x = ${x}, what is y?`;\r\n        const { options: options5, correctIndex: correctIndex5 } =\r\n          generateNumericOptions(y);\r\n        correctAnswer = correctIndex5;\r\n        options = options5;\r\n      }\r\n\r\n      questions.push({\r\n        id: `math_algebra_${Date.now()}_${i}`,\r\n        category: QuizCategory.MATH,\r\n        question,\r\n        options,\r\n        correctAnswer,\r\n      });\r\n    }\r\n\r\n    return questions;\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////\r\n  //\r\n  // Specific question generators based on CCAT examples\r\n  //\r\n  /////////////////////////////////////////////////////////\r\n\r\n  // Based on question: A magazine sells for 75 cents. How much will it cost to buy five magazines?\r\n  private static createMagazineCostQuestion(): {\r\n    question: string;\r\n    correctAnswer: number;\r\n    options: [string, string, string, string];\r\n  } {\r\n    const pricePerMagazine = Math.floor(Math.random() * 50) + 25; // 25-75 cents\r\n    const quantity = Math.floor(Math.random() * 8) + 3; // 3-10 magazines\r\n    const totalCost = pricePerMagazine * quantity;\r\n\r\n    const question = `A magazine sells for ${pricePerMagazine} cents. How much will it cost to buy ${quantity} magazines?`;\r\n    const { options, correctIndex } = generateMonetaryOptions(totalCost);\r\n\r\n    return { question, correctAnswer: correctIndex, options };\r\n  }\r\n\r\n  // Based on question: If a couch regularly sells for $500 and is being sold at a 35% discount, what is the discounted price?\r\n  private static createDiscountQuestion(): {\r\n    question: string;\r\n    correctAnswer: number;\r\n    options: [string, string, string, string];\r\n  } {\r\n    const originalPrice = Math.floor(Math.random() * 40) * 10 + 100; // $100-$500, divisible by 10\r\n    const discountPercent = (Math.floor(Math.random() * 7) + 4) * 5; // 20-50% discount (divisible by 5)\r\n    const discountAmount = Math.round((originalPrice * discountPercent) / 100);\r\n    const discountedPrice = originalPrice - discountAmount;\r\n\r\n    const question = `If a couch regularly sells for $${originalPrice} and is being sold at a ${discountPercent}% discount, what is the discounted price?`;\r\n    const { options, correctIndex } = generateDollarOptions(discountedPrice);\r\n\r\n    return { question, correctAnswer: correctIndex, options };\r\n  }\r\n\r\n  // Based on question: A group of four numbers has an average (arithmetic mean) of 17. The first three numbers are 9, 32 and 19. What is the other number?\r\n  private static createAverageQuestion(): {\r\n    question: string;\r\n    correctAnswer: number;\r\n    options: [string, string, string, string];\r\n  } {\r\n    const average = Math.floor(Math.random() * 20) + 10; // 10-30\r\n    const numCount = 4;\r\n    const total = average * numCount;\r\n\r\n    // Generate three random numbers\r\n    const num1 = Math.floor(Math.random() * 20) + 1;\r\n    const num2 = Math.floor(Math.random() * 30) + 1;\r\n    const num3 = Math.floor(Math.random() * 25) + 1;\r\n    const num4 = total - num1 - num2 - num3;\r\n\r\n    const question = `A group of four numbers has an average (arithmetic mean) of ${average}. The first three numbers are ${num1}, ${num2} and ${num3}. What is the other number?`;\r\n    const { options, correctIndex } = generateNumericOptions(num4);\r\n\r\n    return { question, correctAnswer: correctIndex, options };\r\n  }\r\n\r\n  // Based on question: A restaurant sold 250 drinks in a night. Some of the drinks were sold for $2 each and the rest for $5 each. If the total sales of drinks for the night was $830, how many $2 drinks were sold?\r\n  private static createRestaurantSalesQuestion(): {\r\n    question: string;\r\n    correctAnswer: number;\r\n    options: [string, string, string, string];\r\n  } {\r\n    const totalDrinks = Math.floor(Math.random() * 200) + 200; // 200-400 drinks\r\n    const cheapPrice = 2;\r\n    const expensivePrice = 5;\r\n    const totalSales = Math.floor(Math.random() * 500) + 800; // $800-$1300\r\n\r\n    // Calculate how many $2 drinks were sold\r\n    // Let x = number of $2 drinks, y = number of $5 drinks\r\n    // x + y = totalDrinks\r\n    // 2x + 5y = totalSales\r\n    // Solving: y = (totalSales - 2*totalDrinks) / 3\r\n    const expensiveDrinks = Math.floor((totalSales - 2 * totalDrinks) / 3);\r\n    const cheapDrinks = totalDrinks - expensiveDrinks;\r\n\r\n    const question = `A restaurant sold ${totalDrinks} drinks in a night. Some of the drinks were sold for $${cheapPrice} each and the rest for $${expensivePrice} each. If the total sales of drinks for the night was $${totalSales}, how many $${cheapPrice} drinks were sold?`;\r\n    const { options, correctIndex } = generateNumericOptions(cheapDrinks);\r\n\r\n    return { question, correctAnswer: correctIndex, options };\r\n  }\r\n\r\n  // Based on question: In one month, a farmer produces 1200 pounds of corn. In the following month, the amount of corn he produces increases by 15% over the previous month. How much corn does he produce in the second month?\r\n  private static createCornProductionQuestion(): {\r\n    question: string;\r\n    correctAnswer: number;\r\n    options: [string, string, string, string];\r\n  } {\r\n    const firstMonth = Math.floor(Math.random() * 50) * 10 + 1000; // 1000-1500 pounds, divisible by 10\r\n    const increasePercent = Math.floor(Math.random() * 4) * 5 + 10; // 10-30% increase, divisible by 5\r\n    const increaseAmount = Math.round((firstMonth * increasePercent) / 100);\r\n    const secondMonth = firstMonth + increaseAmount;\r\n\r\n    const question = `In one month, a farmer produces ${firstMonth} pounds of corn. In the following month, the amount of corn he produces increases by ${increasePercent}% over the previous month. How much corn does he produce in the second month?`;\r\n    const { options, correctIndex } = generateNumericOptions(secondMonth);\r\n\r\n    return { question, correctAnswer: correctIndex, options };\r\n  }\r\n\r\n  // Based on question: A plane loaded with cargo travels 2000 miles at an average speed of 400 miles per hour. On the return trip by the same route, it travels at an average speed of 480 miles per hour. How much quicker was the return trip?\r\n  private static createSpeedDistanceQuestion(): {\r\n    question: string;\r\n    correctAnswer: number;\r\n    options: [string, string, string, string];\r\n  } {\r\n    const distance = Math.floor(Math.random() * 200) + 100; // 100-300 miles\r\n    const time = Math.floor(Math.random() * 4) + 2; // 2-6 hours\r\n    const speed = Math.round(distance / time);\r\n\r\n    const question = `If a train travels ${distance} miles in ${time} hours, what is its average speed?`;\r\n    const { options, correctIndex } = generateNumericOptions(speed);\r\n\r\n    return { question, correctAnswer: correctIndex, options };\r\n  }\r\n\r\n  // Based on a question: Which of the following is the smallest value?\r\n  private static createDecimalComparisonQuestion(): {\r\n    question: string;\r\n    correctAnswer: number;\r\n    options: [string, string, string, string, string];\r\n  } {\r\n    const isSmallest = Math.random() < 0.5; // Randomly choose smallest or largest\r\n    const { options, correctIndex } =\r\n      generateDecimalComparisonOptions(isSmallest);\r\n\r\n    const question = `Which of the following is the ${\r\n      isSmallest ? \"smallest\" : \"largest\"\r\n    } value?`;\r\n\r\n    return { question, correctAnswer: correctIndex, options };\r\n  }\r\n\r\n  // TODO QUESTIONS:\r\n  // 36 is 15% of what number?\r\n\r\n  private static createGeometryQuestion(): {\r\n    question: string;\r\n    correctAnswer: number;\r\n    options: [string, string, string, string];\r\n  } {\r\n    const sideLength = Math.floor(Math.random() * 10) + 5; // 5-15 cm\r\n    const perimeter = sideLength * 4;\r\n\r\n    const question = `If the perimeter of a square is ${perimeter} cm, what is the length of one side?`;\r\n    const { options, correctIndex } = generateNumericOptions(sideLength);\r\n\r\n    return { question, correctAnswer: correctIndex, options };\r\n  }\r\n\r\n  private static createRatioQuestion(): {\r\n    question: string;\r\n    correctAnswer: number;\r\n    options: [string, string, string, string];\r\n  } {\r\n    const unitPrice = Math.random() * 2 + 0.5; // $0.50-$2.50\r\n    const quantity1 = Math.floor(Math.random() * 4) + 3; // 3-6 items\r\n    const totalCost1 = Math.round(unitPrice * quantity1 * 100) / 100;\r\n\r\n    // Ensure quantity2 is different from quantity1 and in a different range\r\n    let quantity2;\r\n    do {\r\n      quantity2 = Math.floor(Math.random() * 4) + 7; // 7-10 items\r\n    } while (quantity2 === quantity1);\r\n\r\n    const totalCost2 = Math.round(unitPrice * quantity2 * 100) / 100;\r\n\r\n    const question = `If ${quantity1} apples cost $${totalCost1.toFixed(\r\n      2\r\n    )}, how much do ${quantity2} apples cost?`;\r\n\r\n    // Use dollar options generator to ensure all options are formatted to 2 decimal places\r\n    const { options, correctIndex } = generateDollarOptions(totalCost2);\r\n\r\n    return { question, correctAnswer: correctIndex, options };\r\n  }\r\n}\r\n","import {\r\n  QuizQuestion,\r\n  QuizCategory,\r\n  VerbalQuestion,\r\n  VocabularyWord,\r\n} from \"@/types/quiz\";\r\nimport vocabularyData from \"@/data/vocabulary\";\r\nimport { shuffleArray } from \"./helpers\";\r\n\r\nenum VerbalQuestionType {\r\n  FILL_IN_THE_BLANK = \"fill_in_the_blank\",\r\n  ANTONYM = \"antonym\",\r\n}\r\n\r\nexport class VerbalQuestionGenerator {\r\n  static generateQuestions(count: number): QuizQuestion[] {\r\n    const questions: QuizQuestion[] = [];\r\n    const shuffledVocabulary = shuffleArray([...vocabularyData]);\r\n\r\n    for (let i = 0; i < count && i < shuffledVocabulary.length; i++) {\r\n      const word = shuffledVocabulary[i];\r\n\r\n      // Randomly choose question type\r\n      const questionType =\r\n        Math.random() < 0.5\r\n          ? VerbalQuestionType.FILL_IN_THE_BLANK\r\n          : VerbalQuestionType.ANTONYM;\r\n\r\n      const question =\r\n        questionType === VerbalQuestionType.FILL_IN_THE_BLANK\r\n          ? this.generateFillInTheBlankQuestion(word)\r\n          : this.generateAntonymQuestion(word);\r\n\r\n      questions.push(question);\r\n    }\r\n\r\n    return questions;\r\n  }\r\n\r\n  private static generateFillInTheBlankQuestion(\r\n    word: VocabularyWord\r\n  ): VerbalQuestion {\r\n    // Create a fill-in-the-blank question using the word's example sentence\r\n    const exampleSentence = word.example;\r\n\r\n    // Replace the word with blanks in the example sentence\r\n    const questionText = exampleSentence.replace(\r\n      new RegExp(`\\\\b${word.word}\\\\b`, \"gi\"),\r\n      \"____________\"\r\n    );\r\n\r\n    const options = this.generateDistractors(word);\r\n\r\n    return {\r\n      id: `verbal_${Date.now()}_${word.word}`,\r\n      category: QuizCategory.VERBAL_REASONING,\r\n      question: questionText,\r\n      options,\r\n      correctAnswer: options.indexOf(word.word.toLowerCase()),\r\n      vocabularyWord: word.word,\r\n      context: exampleSentence,\r\n    };\r\n  }\r\n\r\n  private static generateAntonymQuestion(word: VocabularyWord): VerbalQuestion {\r\n    const questionText = `Choose the word that is most nearly OPPOSITE to the word in capital letters.\\n\\n${word.word.toUpperCase()}`;\r\n\r\n    const options = this.generateAntonymOptions(word);\r\n\r\n    return {\r\n      id: `verbal_antonym_${Date.now()}_${word.word}`,\r\n      category: QuizCategory.VERBAL_REASONING,\r\n      question: questionText,\r\n      options,\r\n      correctAnswer: options.indexOf(word.antonym?.toLowerCase() || \"opposite\"),\r\n      vocabularyWord: word.word,\r\n      context: `Antonym for ${word.word}`,\r\n    };\r\n  }\r\n\r\n  private static generateDistractors(targetWord: VocabularyWord): string[] {\r\n    const options = [targetWord.word.toLowerCase()];\r\n\r\n    // Get all other words from vocabulary\r\n    const allWords = vocabularyData\r\n      .filter((w) => w.word.toLowerCase() !== targetWord.word.toLowerCase())\r\n      .map((w) => w.word.toLowerCase());\r\n\r\n    // Generate distractors that are semantically related but incorrect\r\n    const semanticDistractors = this.selectSemanticDistractors(\r\n      targetWord,\r\n      allWords\r\n    );\r\n\r\n    // Add semantic distractors first\r\n    for (const distractor of semanticDistractors) {\r\n      if (!options.includes(distractor)) {\r\n        options.push(distractor);\r\n      }\r\n    }\r\n\r\n    // Add random words if we don't have enough distractors\r\n    while (options.length < 5 && allWords.length > 0) {\r\n      const randomWord = allWords[Math.floor(Math.random() * allWords.length)];\r\n      if (!options.includes(randomWord)) {\r\n        options.push(randomWord);\r\n        allWords.splice(allWords.indexOf(randomWord), 1);\r\n      }\r\n    }\r\n\r\n    return shuffleArray(options);\r\n  }\r\n\r\n  private static selectSemanticDistractors(\r\n    targetWord: any,\r\n    allWords: string[]\r\n  ): string[] {\r\n    const distractors: string[] = [];\r\n    const targetMeaning = targetWord.meaning.toLowerCase();\r\n\r\n    // Look for words with similar meanings (synonyms) or opposite meanings\r\n    for (const word of allWords) {\r\n      const vocabEntry = vocabularyData.find(\r\n        (w) => w.word.toLowerCase() === word\r\n      );\r\n      if (!vocabEntry) continue;\r\n\r\n      const meaning = vocabEntry.meaning.toLowerCase();\r\n\r\n      // Add words with similar meanings (potential synonyms)\r\n      if (this.hasSimilarMeaning(targetMeaning, meaning)) {\r\n        distractors.push(word);\r\n        if (distractors.length >= 2) break;\r\n      }\r\n    }\r\n\r\n    return distractors;\r\n  }\r\n\r\n  private static hasSimilarMeaning(\r\n    meaning1: string,\r\n    meaning2: string\r\n  ): boolean {\r\n    // Simple similarity check based on common words\r\n    const words1 = meaning1.split(/\\s+/);\r\n    const words2 = meaning2.split(/\\s+/);\r\n\r\n    // Check for overlapping meaningful words (excluding common words)\r\n    const commonWords = [\r\n      \"the\",\r\n      \"a\",\r\n      \"an\",\r\n      \"and\",\r\n      \"or\",\r\n      \"but\",\r\n      \"in\",\r\n      \"on\",\r\n      \"at\",\r\n      \"to\",\r\n      \"for\",\r\n      \"of\",\r\n      \"with\",\r\n      \"by\",\r\n    ];\r\n    const meaningfulWords1 = words1.filter(\r\n      (w) => !commonWords.includes(w.toLowerCase())\r\n    );\r\n    const meaningfulWords2 = words2.filter(\r\n      (w) => !commonWords.includes(w.toLowerCase())\r\n    );\r\n\r\n    const overlap = meaningfulWords1.filter((w) =>\r\n      meaningfulWords2.includes(w)\r\n    );\r\n    return overlap.length > 0;\r\n  }\r\n\r\n  private static generateAntonymOptions(targetWord: VocabularyWord): string[] {\r\n    const antonym = targetWord.antonym?.toLowerCase() || \"opposite\";\r\n    const options = [antonym];\r\n\r\n    // Get all other words from vocabulary\r\n    const allWords = vocabularyData\r\n      .filter(\r\n        (w) =>\r\n          w.word.toLowerCase() !== targetWord.word.toLowerCase() &&\r\n          w.word.toLowerCase() !== antonym\r\n      )\r\n      .map((w) => w.word.toLowerCase());\r\n\r\n    // Add random words as distractors\r\n    while (options.length < 5 && allWords.length > 0) {\r\n      const randomWord = allWords[Math.floor(Math.random() * allWords.length)];\r\n      if (!options.includes(randomWord)) {\r\n        options.push(randomWord);\r\n        allWords.splice(allWords.indexOf(randomWord), 1);\r\n      }\r\n    }\r\n\r\n    return shuffleArray(options);\r\n  }\r\n}\r\n","import { QuizQuestion, QuizCategory } from \"@/types/quiz\";\r\nimport { shuffleArray } from \"./helpers\";\r\n\r\nexport class LogicalQuestionGenerator {\r\n  static generateQuestions(count: number): QuizQuestion[] {\r\n    const questions: QuizQuestion[] = [];\r\n\r\n    // Distribute questions across different CCAT types\r\n    const letterSequences = Math.ceil(count * 0.25); // 25% letter sequences\r\n    const numberSequences = Math.ceil(count * 0.25); // 25% number sequences\r\n    const logicalStatements = Math.ceil(count * 0.25); // 25% logical statements\r\n    const textComparisons =\r\n      count - letterSequences - numberSequences - logicalStatements; // remaining for text comparisons\r\n\r\n    // Generate questions for each type\r\n    questions.push(...this.generateLetterSequences(letterSequences));\r\n    questions.push(...this.generateNumberSequences(numberSequences));\r\n    questions.push(...this.generateLogicalStatements(logicalStatements));\r\n    questions.push(...this.generateTextComparisons(textComparisons));\r\n\r\n    // Shuffle and return\r\n    return shuffleArray(questions).slice(0, count);\r\n  }\r\n\r\n  private static generateLetterSequences(count: number): QuizQuestion[] {\r\n    const questions: QuizQuestion[] = [];\r\n\r\n    for (let i = 0; i < count; i++) {\r\n      const sequence = this.createLetterSequence();\r\n\r\n      questions.push({\r\n        id: `logical_letter_${Date.now()}_${i}`,\r\n        category: QuizCategory.LOGICAL_REASONING,\r\n        question: sequence.question,\r\n        options: sequence.options,\r\n        correctAnswer: sequence.correctAnswer,\r\n      });\r\n    }\r\n\r\n    return questions;\r\n  }\r\n\r\n  private static generateNumberSequences(count: number): QuizQuestion[] {\r\n    const questions: QuizQuestion[] = [];\r\n\r\n    for (let i = 0; i < count; i++) {\r\n      const sequence = this.createNumberSequence();\r\n\r\n      questions.push({\r\n        id: `logical_number_${Date.now()}_${i}`,\r\n        category: QuizCategory.LOGICAL_REASONING,\r\n        question: sequence.question,\r\n        options: sequence.options,\r\n        correctAnswer: sequence.correctAnswer,\r\n      });\r\n    }\r\n\r\n    return questions;\r\n  }\r\n\r\n  private static generateLogicalStatements(count: number): QuizQuestion[] {\r\n    const questions: QuizQuestion[] = [];\r\n\r\n    for (let i = 0; i < count; i++) {\r\n      const statement = this.createLogicalStatement();\r\n\r\n      questions.push({\r\n        id: `logical_statement_${Date.now()}_${i}`,\r\n        category: QuizCategory.LOGICAL_REASONING,\r\n        question: statement.question,\r\n        options: statement.options,\r\n        correctAnswer: statement.correctAnswer,\r\n      });\r\n    }\r\n\r\n    return questions;\r\n  }\r\n\r\n  private static generateTextComparisons(count: number): QuizQuestion[] {\r\n    const questions: QuizQuestion[] = [];\r\n\r\n    for (let i = 0; i < count; i++) {\r\n      const comparison = this.createTextComparison();\r\n\r\n      questions.push({\r\n        id: `logical_text_${Date.now()}_${i}`,\r\n        category: QuizCategory.LOGICAL_REASONING,\r\n        question: comparison.question,\r\n        options: comparison.options,\r\n        correctAnswer: comparison.correctAnswer,\r\n      });\r\n    }\r\n\r\n    return questions;\r\n  }\r\n\r\n  // CCAT-style question creation methods\r\n  private static createLetterSequence(): {\r\n    question: string;\r\n    options: [string, string, string, string];\r\n    correctAnswer: number;\r\n  } {\r\n    const sequences = [\r\n      {\r\n        question:\r\n          \"What would be the next group of letters in the following series?\\n\\nbadg … dbdf … fcde … hddd\",\r\n        correct: \"ieee\",\r\n        options: [\"ieee\", \"heee\", \"geee\", \"feee\"] as [\r\n          string,\r\n          string,\r\n          string,\r\n          string\r\n        ],\r\n      },\r\n      {\r\n        question:\r\n          \"What would be the next group of letters in the following series?\\n\\nabcd … cdef … efgh … ghij\",\r\n        correct: \"ijkl\",\r\n        options: [\"ijkl\", \"hijk\", \"ghij\", \"fghi\"] as [\r\n          string,\r\n          string,\r\n          string,\r\n          string\r\n        ],\r\n      },\r\n      {\r\n        question:\r\n          \"What would be the next group of letters in the following series?\\n\\nwxyz … yzab … abcd … cdef\",\r\n        correct: \"efgh\",\r\n        options: [\"efgh\", \"defg\", \"cdef\", \"bcde\"] as [\r\n          string,\r\n          string,\r\n          string,\r\n          string\r\n        ],\r\n      },\r\n    ];\r\n\r\n    const sequence = sequences[Math.floor(Math.random() * sequences.length)];\r\n    return {\r\n      question: sequence.question,\r\n      options: sequence.options,\r\n      correctAnswer: sequence.options.indexOf(sequence.correct),\r\n    };\r\n  }\r\n\r\n  private static createNumberSequence(): {\r\n    question: string;\r\n    options: [string, string, string, string];\r\n    correctAnswer: number;\r\n  } {\r\n    const sequenceTypes = [\r\n      () => this.generateArithmeticSequence(),\r\n      () => this.generateGeometricSequence(),\r\n      () => this.generateQuadraticSequence(),\r\n      () => this.generateFibonacciSequence(),\r\n      () => this.generatePowerSequence(),\r\n    ];\r\n\r\n    const selectedType =\r\n      sequenceTypes[Math.floor(Math.random() * sequenceTypes.length)];\r\n    return selectedType();\r\n  }\r\n\r\n  private static generateArithmeticSequence(): {\r\n    question: string;\r\n    options: [string, string, string, string];\r\n    correctAnswer: number;\r\n  } {\r\n    const start = Math.floor(Math.random() * 20) + 1;\r\n    const difference = Math.floor(Math.random() * 10) + 1;\r\n    const length = 5;\r\n\r\n    const sequence = [];\r\n    for (let i = 0; i < length; i++) {\r\n      sequence.push(start + i * difference);\r\n    }\r\n\r\n    const correctAnswer = start + length * difference;\r\n    const options = this.generateNumberOptions(correctAnswer);\r\n\r\n    return {\r\n      question: `What would be the next number in the following series?\\n\\n${sequence.join(\r\n        \" … \"\r\n      )} …`,\r\n      options,\r\n      correctAnswer: options.indexOf(correctAnswer.toString()),\r\n    };\r\n  }\r\n\r\n  private static generateGeometricSequence(): {\r\n    question: string;\r\n    options: [string, string, string, string];\r\n    correctAnswer: number;\r\n  } {\r\n    const start = Math.floor(Math.random() * 5) + 2;\r\n    const ratio = Math.floor(Math.random() * 3) + 2;\r\n    const length = 5;\r\n\r\n    const sequence = [];\r\n    let current = start;\r\n    for (let i = 0; i < length; i++) {\r\n      sequence.push(current);\r\n      current *= ratio;\r\n    }\r\n\r\n    const correctAnswer = current;\r\n    const options = this.generateNumberOptions(correctAnswer);\r\n\r\n    return {\r\n      question: `What would be the next number in the following series?\\n\\n${sequence.join(\r\n        \" … \"\r\n      )} …`,\r\n      options,\r\n      correctAnswer: options.indexOf(correctAnswer.toString()),\r\n    };\r\n  }\r\n\r\n  private static generateQuadraticSequence(): {\r\n    question: string;\r\n    options: [string, string, string, string];\r\n    correctAnswer: number;\r\n  } {\r\n    const a = Math.floor(Math.random() * 2) + 1;\r\n    const b = Math.floor(Math.random() * 10) - 5;\r\n    const c = Math.floor(Math.random() * 10) + 1;\r\n    const length = 5;\r\n\r\n    const sequence = [];\r\n    for (let i = 1; i <= length; i++) {\r\n      sequence.push(a * i * i + b * i + c);\r\n    }\r\n\r\n    const correctAnswer =\r\n      a * (length + 1) * (length + 1) + b * (length + 1) + c;\r\n    const options = this.generateNumberOptions(correctAnswer);\r\n\r\n    return {\r\n      question: `What would be the next number in the following series?\\n\\n${sequence.join(\r\n        \" … \"\r\n      )} …`,\r\n      options,\r\n      correctAnswer: options.indexOf(correctAnswer.toString()),\r\n    };\r\n  }\r\n\r\n  private static generateFibonacciSequence(): {\r\n    question: string;\r\n    options: [string, string, string, string];\r\n    correctAnswer: number;\r\n  } {\r\n    const start1 = Math.floor(Math.random() * 5) + 1;\r\n    const start2 = Math.floor(Math.random() * 5) + 1;\r\n    const length = 5;\r\n\r\n    const sequence = [start1, start2];\r\n    for (let i = 2; i < length; i++) {\r\n      sequence.push(sequence[i - 1] + sequence[i - 2]);\r\n    }\r\n\r\n    const correctAnswer = sequence[length - 1] + sequence[length - 2];\r\n    const options = this.generateNumberOptions(correctAnswer);\r\n\r\n    return {\r\n      question: `What would be the next number in the following series?\\n\\n${sequence.join(\r\n        \" … \"\r\n      )} …`,\r\n      options,\r\n      correctAnswer: options.indexOf(correctAnswer.toString()),\r\n    };\r\n  }\r\n\r\n  private static generatePowerSequence(): {\r\n    question: string;\r\n    options: [string, string, string, string];\r\n    correctAnswer: number;\r\n  } {\r\n    const base = Math.floor(Math.random() * 3) + 2;\r\n    const length = 5;\r\n\r\n    const sequence = [];\r\n    for (let i = 1; i <= length; i++) {\r\n      sequence.push(Math.pow(base, i));\r\n    }\r\n\r\n    const correctAnswer = Math.pow(base, length + 1);\r\n    const options = this.generateNumberOptions(correctAnswer);\r\n\r\n    return {\r\n      question: `What would be the next number in the following series?\\n\\n${sequence.join(\r\n        \" … \"\r\n      )} …`,\r\n      options,\r\n      correctAnswer: options.indexOf(correctAnswer.toString()),\r\n    };\r\n  }\r\n\r\n  private static generateNumberOptions(\r\n    correctAnswer: number\r\n  ): [string, string, string, string] {\r\n    const options = [correctAnswer.toString()];\r\n    const range = Math.max(5, Math.floor(correctAnswer * 0.3));\r\n\r\n    while (options.length < 4) {\r\n      const variation = Math.floor(Math.random() * range * 2) - range;\r\n      const option = correctAnswer + variation;\r\n\r\n      if (option > 0 && !options.includes(option.toString())) {\r\n        options.push(option.toString());\r\n      }\r\n    }\r\n\r\n    return shuffleArray(options) as [string, string, string, string];\r\n  }\r\n\r\n  private static createLogicalStatement(): {\r\n    question: string;\r\n    options: [string, string, string];\r\n    correctAnswer: number;\r\n  } {\r\n    const statements = [\r\n      {\r\n        question:\r\n          \"Assume the first two statements are true. Is the final statement: 1) True, 2) False, or 3) Uncertain based on the information provided?\\n\\nSusan is taller than Lisa.\\nLisa is shorter than Jean.\\nJean is taller than Susan.\",\r\n        correct: \"False\",\r\n        options: [\"True\", \"False\", \"Uncertain\"] as [string, string, string],\r\n      },\r\n      {\r\n        question:\r\n          \"Assume the first two statements are true. Is the final statement: 1) True, 2) False, or 3) Uncertain based on the information provided?\\n\\nAll birds can fly.\\nPenguins are birds.\\nPenguins can fly.\",\r\n        correct: \"False\",\r\n        options: [\"True\", \"False\", \"Uncertain\"] as [string, string, string],\r\n      },\r\n      {\r\n        question:\r\n          \"Assume the first two statements are true. Is the final statement: 1) True, 2) False, or 3) Uncertain based on the information provided?\\n\\nIf it rains, the ground gets wet.\\nThe ground is wet.\\nIt is raining.\",\r\n        correct: \"Uncertain\",\r\n        options: [\"True\", \"False\", \"Uncertain\"] as [string, string, string],\r\n      },\r\n      {\r\n        question:\r\n          \"Assume the first two statements are true. Is the final statement: 1) True, 2) False, or 3) Uncertain based on the information provided?\\n\\nJohn is older than Mary.\\nMary is older than Tom.\\nJohn is older than Tom.\",\r\n        correct: \"True\",\r\n        options: [\"True\", \"False\", \"Uncertain\"] as [string, string, string],\r\n      },\r\n    ];\r\n\r\n    const statement = statements[Math.floor(Math.random() * statements.length)];\r\n    return {\r\n      question: statement.question,\r\n      options: statement.options,\r\n      correctAnswer: statement.options.indexOf(statement.correct),\r\n    };\r\n  }\r\n\r\n  private static createTextComparison(): {\r\n    question: string;\r\n    options: [string, string, string, string];\r\n    correctAnswer: number;\r\n  } {\r\n    const comparisons = [\r\n      {\r\n        question:\r\n          \"How many of the five items in the left hand column are exactly the same as the corresponding entry in the right hand column?\\n\\nAcme Cement Co.                                Acme Cement Comp.\\nEvans Industrial, Inc.                           Evans Industrials, Inc.\\nWilliams & Petersen                             Williams & Peterson\\nDeloitte, Stephens and Sons             Deloitte, Stevens and Sons\\nCarter Plastics Co                                Carter Plastics Co\",\r\n        correct: \"1\",\r\n        options: [\"0\", \"1\", \"2\", \"3\"] as [string, string, string, string],\r\n      },\r\n      {\r\n        question:\r\n          \"How many of the five items in the left hand column are exactly the same as the corresponding entry in the right hand column?\\n\\nSmith & Associates                              Smith & Associates\\nJohnson Manufacturing Co.                       Johnson Manufacturing Corp.\\nBrown Industries, Inc.                         Brown Industries, Inc.\\nDavis Construction Ltd.                        Davis Construction Ltd.\\nWilson Technology Group                        Wilson Technologies Group\",\r\n        correct: \"3\",\r\n        options: [\"1\", \"2\", \"3\", \"4\"] as [string, string, string, string],\r\n      },\r\n      {\r\n        question:\r\n          \"How many of the five items in the left hand column are exactly the same as the corresponding entry in the right hand column?\\n\\nABC Corporation                                ABC Corporation\\nXYZ Limited                                    XYZ Ltd.\\nDEF Industries                                 DEF Industries\\nGHI Manufacturing                              GHI Manufacturing\\nJKL Services Inc.                              JKL Services Inc.\",\r\n        correct: \"3\",\r\n        options: [\"2\", \"3\", \"4\", \"5\"] as [string, string, string, string],\r\n      },\r\n    ];\r\n\r\n    const comparison =\r\n      comparisons[Math.floor(Math.random() * comparisons.length)];\r\n    return {\r\n      question: comparison.question,\r\n      options: comparison.options,\r\n      correctAnswer: comparison.options.indexOf(comparison.correct),\r\n    };\r\n  }\r\n}\r\n","import { QuizQuestion, QuizCategory } from \"@/types/quiz\";\r\n\r\nexport class SpatialQuestionGenerator {\r\n  static generateQuestions(count: number): QuizQuestion[] {\r\n    // Placeholder for spatial reasoning questions\r\n    // This will be implemented in the future\r\n    return [];\r\n  }\r\n}\r\n","import { QuizQuestion, QuizCategory } from \"@/types/quiz\";\r\nimport { MathQuestionGenerator } from \"./generators/mathGenerator\";\r\nimport { VerbalQuestionGenerator } from \"./generators/verbalGenerator\";\r\nimport { LogicalQuestionGenerator } from \"./generators/logicalGenerator\";\r\nimport { SpatialQuestionGenerator } from \"./generators/spatialGenerator\";\r\n\r\nexport class QuestionGenerator {\r\n  private static readonly TOTAL_QUESTIONS = 50;\r\n\r\n  static generateQuizQuestions(categories: QuizCategory[]): QuizQuestion[] {\r\n    const questions: QuizQuestion[] = [];\r\n\r\n    // Calculate questions per category\r\n    const enabledCategories = categories.filter(\r\n      (cat) => cat !== QuizCategory.SPATIAL_REASONING\r\n    );\r\n    const questionsPerCategory = Math.floor(\r\n      this.TOTAL_QUESTIONS / enabledCategories.length\r\n    );\r\n    const extraQuestions =\r\n      this.TOTAL_QUESTIONS - questionsPerCategory * enabledCategories.length;\r\n\r\n    // Generate questions for each category\r\n    enabledCategories.forEach((category, index) => {\r\n      const count = questionsPerCategory + (index < extraQuestions ? 1 : 0);\r\n      const categoryQuestions = this.generateCategoryQuestions(category, count);\r\n      questions.push(...categoryQuestions);\r\n    });\r\n\r\n    // Shuffle questions to mix categories\r\n    return this.shuffleArray(questions);\r\n  }\r\n\r\n  private static generateCategoryQuestions(\r\n    category: QuizCategory,\r\n    count: number\r\n  ): QuizQuestion[] {\r\n    switch (category) {\r\n      case QuizCategory.MATH:\r\n        return MathQuestionGenerator.generateQuestions(count);\r\n      case QuizCategory.VERBAL_REASONING:\r\n        return VerbalQuestionGenerator.generateQuestions(count);\r\n      case QuizCategory.LOGICAL_REASONING:\r\n        return LogicalQuestionGenerator.generateQuestions(count);\r\n      case QuizCategory.SPATIAL_REASONING:\r\n        return SpatialQuestionGenerator.generateQuestions(count);\r\n      default:\r\n        return [];\r\n    }\r\n  }\r\n\r\n  private static shuffleArray<T>(array: T[]): T[] {\r\n    const shuffled = [...array];\r\n    for (let i = shuffled.length - 1; i > 0; i--) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\r\n    }\r\n    return shuffled;\r\n  }\r\n}\r\n"],"names":["shuffleArray","array","shuffled","i","j","generateNumericOptions","correctAnswer","optionCount","options","attempts","maxAttempts","variation","option","simpleOption","shuffledOptions","correctIndex","generateMonetaryOptions","correctAnswerCents","formatCentsToDollars","cents","generateDollarOptions","correctAnswerDollars","formatDollars","dollars","generateDecimalComparisonOptions","isSmallest","maxValue","decimalPlaces","generateDecimal","wholePart","decimalPart","decimals","decimal","simpleDecimal","sortedDecimals","d","a","b","targetValue","formattedOptions","num","MathQuestionGenerator","count","questions","wordProblems","percentages","algebra","wordProblemTypes","typeIndex","question","QuizCategory","percentageType","percentage","result","originalNumber","options1","correctIndex1","number","options2","correctIndex2","isIncrease","change","options3","correctIndex3","algebraType","x","c","options4","correctIndex4","y","options5","correctIndex5","pricePerMagazine","quantity","totalCost","originalPrice","discountPercent","discountAmount","discountedPrice","average","total","num1","num2","num3","num4","totalDrinks","cheapPrice","expensivePrice","totalSales","expensiveDrinks","cheapDrinks","firstMonth","increasePercent","increaseAmount","secondMonth","distance","time","speed","sideLength","unitPrice","quantity1","totalCost1","quantity2","totalCost2","VerbalQuestionGenerator","shuffledVocabulary","vocabularyData","word","exampleSentence","questionText","targetWord","allWords","w","semanticDistractors","distractor","randomWord","distractors","targetMeaning","vocabEntry","meaning","meaning1","meaning2","words1","words2","commonWords","meaningfulWords1","meaningfulWords2","antonym","LogicalQuestionGenerator","letterSequences","numberSequences","logicalStatements","textComparisons","sequence","statement","comparison","sequences","sequenceTypes","selectedType","start","difference","length","ratio","current","start1","start2","base","range","statements","comparisons","SpatialQuestionGenerator","QuestionGenerator","categories","enabledCategories","cat","questionsPerCategory","extraQuestions","category","index","categoryQuestions"],"mappings":"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"}